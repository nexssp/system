"use strict";const{spawnSync:spawnSync,execSync:execSync}=require("child_process"),{existsSync:existsSync}=require("fs"),defaultOptions={};function debugOutput(r,e,s,t){e.stdio||(e.stdio="pipe"),console.log(t?"\nResult WITH STDERR:":`\nResult WITHOUT STDERR:\nExecuted: ${r}\nOptions: `,e,`process.cwd(): ${process.cwd()}`,"\nSTDOUT:\n",s,"|END STDOUT"),t&&console.error(t)}function nExec(r,e){const s=(e=parseOptions(e)).stripTerminalColors;delete e.stripTerminalColors;let t="",o="";e.stdio="pipe",r.startsWith("nexss")&&(r+=" --nxsPipeErrors");try{return t=execSync(r,e),t=t.toString(),s&&(t=t.stripTerminalColors()),{exitCode:0,stdout:t,stderr:"",command:r}}catch(n){return n.stdout&&(t=n.stdout.toString()),n.stderr&&(o=n.stderr.toString()),s&&(t=t.stripTerminalColors(),o=o.stripTerminalColors()),nExec.debug&&debugOutput(r,e,t,o),{exitCode:n.status,stdout:t,stderr:o,command:r}}}"win32"!==process.platform&&Object.assign(defaultOptions,{shell:process.shell});const parseOptions=(r={})=>(r.stdio||(r.stdio="pipe"),"win32"!==process.platform?Object.assign(r,{shell:process.shell}):Object.assign(r,{shell:!0}),r.cwd&&!existsSync(r.cwd)?new Error("Folder passed to 'nSpawn' does not exist."):r);function nSpawn(r,e={}){const{parseArgsStringToArgv:s}=require("string-argv");let t=s(r);t="win32"===process.platform?t.map((r=>r.replace(/='(.*)'/,'="$1"'))):t.map((r=>((r=r.replace(/="(.*)"/,"='$1'")).startsWith("-")||(r=`"${r}"`),r)));const[o,...n]=t;nSpawn.debug&&(console.log("command:",r),console.log("cmd:",o),console.log("args:",n));const i=(e=parseOptions(e)).stripTerminalColors;delete e.stripTerminalColors;let c,p="",a="",l=0;try{c=spawnSync(`${o}`,n,e)}catch(r){console.log("Error catched:",r),process.exit(1)}if(!c.error)return c.stdout&&(a=c.stdout.toString()),c.stderr&&(p=c.stderr.toString()),c.status&&(l=c.status),i&&(a=a.stripTerminalColors(),p=p.stripTerminalColors()),nSpawn.debug&&debugOutput(r,e,a,p),{exitCode:l,stdout:a,stderr:p,cmd:o,args:n,command:r};switch(c.error.code){case"ENOENT":throw new Error(`Program has not been found: ${c.error}, path: ${c.error.path}.`);case"EACCES":throw new Error(`Permission denied: ${c.error}, path: ${c.error.path}`);default:throw new Error(c.error)}}nSpawn.debug=!1,module.exports={nSpawn:nSpawn,nExec:nExec};