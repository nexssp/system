"use strict";const{spawnSync:spawnSync}=require("child_process"),{existsSync:existsSync}=require("fs");require("@nexssp/extend")("array");const defaultOptions={};function debugOutput(r,e,s,o){console.log(o?"\nResult WITH STDERR:":`\nResult WITHOUT STDERR:\nExecuted: ${r}\nOptions: `,e,`process.cwd(): ${process.cwd()}`,"\nSTDOUT:\n",s,"|END STDOUT"),o&&console.error(o)}function nSpawn(r,e={}){var{parseArgsStringToArgv:s}=require("string-argv");const[o,...n]=s(r).argStripQuotes();if(nSpawn.debug&&(console.log("command:",r),console.log("cmd:",o),console.log("args:",n)),Object.assign(e,{shell:"win32"==process.platform||process.shell}),e.cwd&&!existsSync(e.cwd))return new Error("Folder passed to 'nSpawn' does not exist.");let t,c="",a="",p=0;e.stdio="pipe";try{t=spawnSync(`${o}`,n,e)}catch(r){console.log("Error catched:",r),process.exit(1)}if(!t.error)return a=t.stdout.toString(),c=t.stderr.toString(),p=t.status,nSpawn.debug&&debugOutput(r,e,a,c),{exitCode:p,stdout:a,stderr:c};switch(t.error.code){case"ENOENT":throw new Error(`Program has not been found: ${t.error}, path: ${t.error.path}`);case"EACCES":throw new Error(`Permission denied: ${t.error}, path: ${t.error.path}`);default:throw new Error(t.error)}}"win32"!==process.platform&&Object.assign(defaultOptions,{shell:process.shell}),nSpawn.debug=!1,module.exports={nSpawn:nSpawn};