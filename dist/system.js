"use strict";const{spawnSync:spawnSync}=require("child_process"),{existsSync:existsSync}=require("fs");require("@nexssp/extend")("array","string");const defaultOptions={};function debugOutput(r,e,s,o){e.stdio||(e.stdio="pipe"),console.log(o?"\nResult WITH STDERR:":`\nResult WITHOUT STDERR:\nExecuted: ${r}\nOptions: `,e,`process.cwd(): ${process.cwd()}`,"\nSTDOUT:\n",s,"|END STDOUT"),o&&console.error(o)}function nSpawn(r,e={}){e.stdio||(e.stdio="pipe");const{parseArgsStringToArgv:s}=require("string-argv");let o=s(r).argStripQuotes();o="win32"===process.platform?o.map((r=>~r.indexOf("=")?`${r.replace("=",'="')}"`:r)):o.map((r=>~r.indexOf("=")?`${r.replace("=","='")}'`:r));const[t,...n]=o;if(nSpawn.debug&&(console.log("command:",r),console.log("cmd:",t),console.log("args:",n)),"win32"!==process.platform?Object.assign(e,{shell:process.shell}):Object.assign(e,{shell:!0}),e.cwd&&!existsSync(e.cwd))return new Error("Folder passed to 'nSpawn' does not exist.");const i=e.stripTerminalColors;delete e.stripTerminalColors;let c,p="",a="",l=0;try{c=spawnSync(`${t}`,n,e)}catch(r){console.log("Error catched:",r),process.exit(1)}if(!c.error)return c.stdout&&(a=c.stdout.toString()),c.stderr&&(p=c.stderr.toString()),c.status&&(l=c.status),i&&(a=a.stripTerminalColors(),p=p.stripTerminalColors()),nSpawn.debug&&debugOutput(r,e,a,p),{exitCode:l,stdout:a,stderr:p};switch(c.error.code){case"ENOENT":throw new Error(`Program has not been found: ${c.error}, path: ${c.error.path}`);case"EACCES":throw new Error(`Permission denied: ${c.error}, path: ${c.error.path}`);default:throw new Error(c.error)}}"win32"!==process.platform&&Object.assign(defaultOptions,{shell:process.shell}),nSpawn.debug=!1,module.exports={nSpawn:nSpawn};