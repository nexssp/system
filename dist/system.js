"use strict";const{spawnSync:spawnSync}=require("child_process"),{existsSync:existsSync}=require("fs");require("@nexssp/extend")("array");const defaultOptions={};function debugOutput(e,r,s,t){console.log(t?"\nResult WITH STDERR:":`\nResult WITHOUT STDERR:\nExecuted: ${e}\nOptions: `,r,`process.cwd(): ${process.cwd()}`,"\nSTDOUT:\n",s,"|END STDOUT"),t&&console.error(t)}function nSpawn(e,r={}){const{parseArgsStringToArgv:s}=require("string-argv");let t=s(e).argStripQuotes();t="win32"===process.platform?t.map((e=>~e.indexOf("=")?`${e.replace("=",'="')}"`:e)):t.map((e=>~e.indexOf("=")?`${e.replace("=","='")}'`:e));const[o,...n]=t;if(nSpawn.debug&&(console.log("command:",e),console.log("cmd:",o),console.log("args:",n)),"win32"!==process.platform?Object.assign(r,{shell:process.shell}):Object.assign(r,{shell:!0}),r.cwd&&!existsSync(r.cwd))return new Error("Folder passed to 'nSpawn' does not exist.");let c,p="",a="",d=0;r.stdio="pipe";try{c=spawnSync(`${o}`,n,r),console.log("DDDDDDDDDDDDDD",`${o}`,n,c.stdout?c.stdout.toString():"stdout empty",c.stderr?c.stderr.toString():"stderr empty")}catch(e){console.log("Error catched:",e),process.exit(1)}if(!c.error)return a=c.stdout.toString(),p=c.stderr.toString(),d=c.status,nSpawn.debug&&debugOutput(e,r,a,p),{exitCode:d,stdout:a,stderr:p};switch(c.error.code){case"ENOENT":throw new Error(`Program has not been found: ${c.error}, path: ${c.error.path}`);case"EACCES":throw new Error(`Permission denied: ${c.error}, path: ${c.error.path}`);default:throw new Error(c.error)}}"win32"!==process.platform&&Object.assign(defaultOptions,{shell:process.shell}),nSpawn.debug=!1,module.exports={nSpawn:nSpawn};